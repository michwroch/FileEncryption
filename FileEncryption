using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace FileEncryption
{
    public class MWFileEncoder
    {
        static byte[] SALT = new byte[] { 0x__, 0x__, 0x__, 0x__, 0x__, 0x__, 0x__, 0x__, 0x__, 0x__, 0x__, 0x__, 0x__, 0x__, 0x__, 0x__ };

        public static byte[] EncryptTextToBytes(string plainText, string password)
        {
            byte[] encrypted;

            using (Rijndael rijAlg = Rijndael.Create())
            {
                Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(password, SALT);
                rijAlg.Key = pdb.GetBytes(32);
                rijAlg.IV = pdb.GetBytes(16);

                // Create an encryptor to perform the stream transform.
                ICryptoTransform encryptor = rijAlg.CreateEncryptor(rijAlg.Key, rijAlg.IV);

                // Create the streams used for encryption.
                using (MemoryStream msEncrypt = new MemoryStream())
                {
                    using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
                    {
                        using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
                        {

                            //Write all data to the stream.
                            swEncrypt.Write(plainText);
                        }
                        encrypted = msEncrypt.ToArray();
                    }
                }
            }


            // Return the encrypted bytes from the memory stream.
            return encrypted;

        }

        public static string[] DecryptLinesFromBytes(byte[] cipherText, string password)
        {
            string[] plaintext = null;

            try
            {
                string str = DecryptTextFromBytes(cipherText, password);

                plaintext = Regex.Split(str, "\r\n|\r|\n");
            }
            catch
            {
                plaintext = new string[] { };
            }

            return plaintext;
        }

        public static string DecryptTextFromBytes(byte[] cipherText, string password)
        {
            string plaintext = null;

            try
            {
                using (Rijndael rijAlg = Rijndael.Create())
                {
                    Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(password, SALT);
                    rijAlg.Key = pdb.GetBytes(32);
                    rijAlg.IV = pdb.GetBytes(16);

                    // Create a decryptor to perform the stream transform.
                    ICryptoTransform decryptor = rijAlg.CreateDecryptor(rijAlg.Key, rijAlg.IV);

                    // Create the streams used for decryption.
                    using (MemoryStream msDecrypt = new MemoryStream(cipherText))
                    {
                        using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                        {
                            using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                            {

                                // Read the decrypted bytes from the decrypting stream
                                // and place them in a string.
                                plaintext = srDecrypt.ReadToEnd();
                            }
                        }
                    }
                }
            }
            catch
            {
                Debug.WriteLine("Can't Load file");
                plaintext = string.Empty;
            }

            return plaintext;
        }

    }
}
